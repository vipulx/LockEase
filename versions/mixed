esphome:
  name: doordash
  friendly_name: DoorDash

esp32:
  board: lolin_s2_mini
  framework:
    type: esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:
  id: homeassistant_api
  encryption:
    key: "rR1cNifOJ4A7CzSfwLfX+H6uWZWU59znkl8OtoFJWts="

ota:
  - platform: esphome
    password: "09a4224b996964a522cddf9dc9efa810"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Doordash Fallback Hotspot"
    password: "Xl8dbl2PNe66"

captive_portal:

# ------------------------
# Globals
# ------------------------
globals:
  - id: disarm_code
    type: std::string
    initial_value: '"0152"'
  - id: arm_code
    type: std::string
    initial_value: '"9999"'
  - id: admin_code
    type: std::string
    initial_value: '"4321"'
  - id: show_welcome
    type: bool
    initial_value: 'true'
  - id: current_pin
    type: std::string
    initial_value: ""
  - id: entering_pin_page
    type: bool
    initial_value: 'false'
  - id: entering_admin_code
    type: bool
    initial_value: 'false'
  - id: menu_unlocked
    type: bool
    initial_value: 'false'
  - id: last_interaction
    type: int
    initial_value: '0'
  - id: current_page
    type: int
    initial_value: '0'   # 0 = Home

# ------------------------
# Time
# ------------------------
time:
  - platform: homeassistant
    id: home_time

# ------------------------
# Sensors
# ------------------------
sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_strength
    update_interval: 60s

# ------------------------
# Text Sensors
# ------------------------
text_sensor:
  - platform: template
    id: alarm_control
    name: "Alarm Control"
  - platform: template
    id: entered_pin
    name: "Entered PIN"
  - platform: template
    id: last_rfid
    name: "Last RFID Tag"
  - platform: template
    id: ha_message
    name: "HA Message"
  - platform: homeassistant
    id: alarm_status
    entity_id: alarm_control_panel.alarmo
    internal: true
  - platform: wifi_info
    ip_address:
      name: "LockEase IP"
      id: my_ip

# ------------------------
# Interval checks
# ------------------------
interval:
  # Handle auto return & menu timeout
  - interval: 1s
    then:
      - lambda: |-
          if (id(last_interaction) > 0) {
            unsigned long elapsed = millis() - id(last_interaction);

            // Auto return to home after 10s
            if (elapsed > 10000 && id(current_page) != 0 && !id(entering_pin_page) && !id(entering_admin_code)) {
              id(current_page) = 0;
              ESP_LOGI("menu", "Auto return to Home page");
            }

            // Lock menu after 1 min
            if (id(menu_unlocked) && elapsed > 60000) {
              id(menu_unlocked) = false;
              id(current_page) = 0;
              ESP_LOGI("menu", "Menu auto-locked after inactivity");
            }
          }

  # Hide welcome screen after 3s
  - interval: 3s
    then:
      - if:
          condition:
            lambda: 'return id(show_welcome);'
          then:
            - lambda: |-
                id(show_welcome) = false;
                id(current_page) = 0;
                ESP_LOGI("display", "Welcome screen hidden");

# ------------------------
# Lights
# ------------------------
light:
  - platform: esp32_rmt_led_strip
    rgb_order: GRB
    chipset: WS2812
    pin: GPIO16
    num_leds: 3
    name: "Status Light"
    id: status_light
    restore_mode: ALWAYS_OFF

# ------------------------
# RFID RC522
# ------------------------
spi:
  clk_pin: GPIO36
  mosi_pin: GPIO34
  miso_pin: GPIO33

rc522_spi:
  cs_pin: GPIO35
  update_interval: 1s
  id: my_rfid
  on_tag:
    then:
      - text_sensor.template.publish:
          id: last_rfid
          state: !lambda 'return x;'
      - lambda: |-
          id(current_page) = 99; // RFID page
          if (x == "32-CA-68-3F" || x == "42-11-E0-3F") {
            id(alarm_control).publish_state("Disarmed");
            ESP_LOGI("rfid", "Access Granted");
          } else {
            ESP_LOGW("rfid", "Access Denied");
          }
      - delay: 5s
      - lambda: |-
          id(current_page) = 0;

# ------------------------
# Keypad
# ------------------------
matrix_keypad:
  id: my_keypad
  rows:
    - pin: GPIO5
    - pin: GPIO4
    - pin: GPIO3
    - pin: GPIO2
  columns:
    - pin: GPIO8
    - pin: GPIO9
    - pin: GPIO7
    - pin: GPIO6
  keys: "123A456B789C*0#D"
  has_diodes: true
  on_key:
    - lambda: |-
        id(last_interaction) = millis();

        if (id(show_welcome)) {
          id(show_welcome) = false;
          id(current_page) = 0;
        }

        if (x == 'A') id(current_page) = 1;
        if (x == 'B') id(current_page) = 2;
        if (x == 'C') id(current_page) = 3;
        if (x == 'D') id(current_page) = 4;

        if ((x == 'A' || x == 'B' || x == 'C' || x == 'D') && !id(menu_unlocked)) {
          id(entering_admin_code) = true;
          id(current_pin) = "";
          id(current_page) = 98; // admin unlock screen
          return;
        }

        if (!id(entering_pin_page) && !id(entering_admin_code) && (x >= '0' && x <= '9')) {
          id(entering_pin_page) = true;
          id(current_pin) = x;
          id(current_page) = 97; // pin screen
        } else if (id(entering_pin_page) || id(entering_admin_code)) {
          if (x != '*' && x != '#') id(current_pin) += x;
        }

# PIN collector
key_collector:
  - id: pincode_reader
    source_id: my_keypad
    min_length: 4
    max_length: 4
    end_keys: "#"
    clear_keys: "*"
    allowed_keys: "0123456789"
    timeout: 5s
    on_result:
      - lambda: |-
          if (id(entering_admin_code)) {
            if (x == id(admin_code)) {
              id(menu_unlocked) = true;
              id(entering_admin_code) = false;
              ESP_LOGI("menu", "Admin menu unlocked");
            } else {
              ESP_LOGW("menu", "Invalid admin PIN");
            }
          } else if (id(entering_pin_page)) {
            if (x == id(disarm_code)) {
              id(alarm_control).publish_state("Disarmed");
            } else if (x == id(arm_code)) {
              id(alarm_control).publish_state("Armed");
            } else {
              ESP_LOGW("keypad", "Invalid PIN");
            }
          }
          id(current_pin) = "";
          id(entering_pin_page) = false;
          id(entering_admin_code) = false;
          id(current_page) = 0;

# ------------------------
# Display (SSD1306)
# ------------------------
i2c:
  sda: GPIO17
  scl: GPIO18
  scan: true

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    id: oled_display
    lambda: |-
      if (id(show_welcome)) {
        it.fill(COLOR_OFF);
        it.printf(64, 30, id(font3), TextAlign::CENTER, "LockEase v1.0");

      } 
      if (id(current_page) == 0) {
          it.strftime(0, 0, id(fontd), "%H:%M", id(home_time).now());
          it.printf(64, 55, id(font2), TextAlign::CENTER, "%s", id(alarm_status).state.c_str());
        }
        else if (id(current_page) == 1) {
          it.printf(0, 0, id(font1), "Device Info");
          it.printf(0, 15, id(font1), "WiFi: %s", id(my_ip).state.c_str());
          it.printf(0, 30, id(font1), "Signal: %.0f dBm", id(wifi_strength).state);
          it.printf(0, 45, id(font1), "Lock: %s", id(lock_relay).state ? "Unlocked" : "Locked");
        }
        else if (id(current_page) == 2) {
          it.printf(64, 10, id(font2), TextAlign::CENTER, "HA Data");
          it.printf(64, 30, id(font1), TextAlign::CENTER, "Entity 1: ...");
          it.printf(64, 45, id(font1), TextAlign::CENTER, "Entity 2: ...");
        }
        else if (id(current_page) == 3) {
          it.printf(64, 32, id(font2), TextAlign::CENTER, "Coming Soon 1");
        }
        else if (id(current_page) == 4) {
          it.printf(64, 32, id(font2), TextAlign::CENTER, "Coming Soon 2");

      } else if (id(current_page) == 97) {
        it.printf(0, 0, id(font2), "Enter PIN:");
        it.printf(0, 25, id(font2), TextAlign::CENTER, "%s", id(current_pin).c_str());
      } else if (id(current_page) == 98) {
        it.printf(0, 0, id(font2), TextAlign::CENTER, "Admin PIN:");
        it.printf(0, 25, id(fontd), "%s", TextAlign::CENTER, id(current_pin).c_str());
      } else if (id(current_page) == 99) {
        it.printf(0, 0, id(font2), TextAlign::CENTER, "Scanning RFID...");
        it.printf(0, 25, id(font1), TextAlign::CENTER, "%s", id(last_rfid).state.c_str());
      }

# ------------------------
# Fonts
# ------------------------
font:
  - file: "ARIAL.TTF"
    id: font1
    size: 12
  - file: "ARIAL.TTF"
    id: font2
    size: 18
  - file: "ARIAL.TTF"
    id: font3
    size: 30
  - file: "fonts/digital-7m.ttf"
    id: fontd
    size: 54


# ------------------------
# Relay for Lock
# ------------------------
switch:
  - platform: gpio
    pin: GPIO19
    id: lock_relay
    name: "Lock Relay"
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: restart
    name: "EaseLock ESP Restart"

# ------------------------
# Binary Sensor
# ------------------------
binary_sensor:
  - platform: status
    name: "Device Status"
