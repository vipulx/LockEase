esphome:
  name: doordash
  friendly_name: LockEase

esp32:
  board: lolin_s2_mini
  framework:
    type: esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:
  id: homeassistant_api
  encryption:
    key: "rR1cNifOJ4A7CzSfwLfX+H6uWZWU59znkl8OtoFJWts="

ota:
  - platform: esphome
    password: "09a4224b996964a522cddf9dc9efa810"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "LockEase v1.0"
    password: "Xl8dbl2PNe66"
captive_portal:

# ------------------------
# Globals (extended)
# ------------------------
globals:
  - id: disarm_code
    type: std::string
    initial_value: '"0152"'
  - id: arm_code
    type: std::string
    initial_value: '"9999"'
  - id: current_pin
    type: std::string
    initial_value: ""
  - id: current_page
    type: int
    initial_value: '0'
  - id: show_welcome
    type: bool
    initial_value: 'true'
  - id: entering_pin_page
    type: bool
    initial_value: 'false'
  - id: rfid_page
    type: bool
    initial_value: 'false'
  - id: message_text
    type: std::string
    initial_value: ""
  - id: show_message
    type: bool
    initial_value: 'false'
  - id: last_interaction
    type: int
    initial_value: '0'
  - id: display_on              # ✅ new (for possible screen toggle later)
    type: bool
    initial_value: 'true'

# -------------------
# Outputs
# -------------------

output:
  - platform: gpio
    pin: GPIO15
    id: onboard_led
    

# -----------------------------
# Time
# -----------------------------
time:
  - platform: homeassistant
    id: home_time

# ------------------------
# Interval Tasks
# ------------------------
interval:
  # Hide welcome screen after 8s
  - interval: 8s
    then:
      - lambda: |-
          id(show_welcome) = false;

  # Auto-return to home page after 10s of inactivity
  - interval: 1s
    then:
      - lambda: |-
          if (!id(show_welcome)) {
            if ((millis() / 1000 - id(last_interaction)) > 10) {
              id(current_page) = 0;
            }
          }

# ------------------------
# Lights
# ------------------------
light:
  - platform: esp32_rmt_led_strip
    rgb_order: GRB
    chipset: WS2812
    pin: GPIO16
    num_leds: 3
    name: "Status Light"
    id: status_light
    restore_mode: ALWAYS_OFF

  - platform: binary
    name: "Onboard LED"
    output: onboard_led
    id: Onboard_status_light
    restore_mode: ALWAYS_OFF


# ------------------------
# Text Sensors
# ------------------------
text_sensor:
  - platform: template
    id: alarm_control
    name: "Alarm Control"

  - platform: template
    id: entered_pin
    name: "Entered PIN"

  - platform: template
    id: last_rfid
    name: "Last RFID Tag"

  - platform: homeassistant
    id: alarm_status
    entity_id: alarm_control_panel.alarmo
    internal: true

  - platform: wifi_info
    ip_address:
      name: "LockEase IP"
      id: my_ip

  # ✅ HA message push (changed to use script for reliable clearing)
  - platform: homeassistant
    id: ha_message
    entity_id: input_text.oled_message
    on_value:
      then:
        - script.execute: show_temp_message

# ------------------------
# RFID RC522
# ------------------------
spi:
  clk_pin: GPIO36
  mosi_pin: GPIO34
  miso_pin: GPIO33

rc522_spi:
  cs_pin: GPIO35
  update_interval: 1s
  id: my_rfid
  on_tag:
    then:
      - lambda: |-
          id(rfid_page) = true;
          id(last_interaction) = millis() / 1000;
          id(last_rfid).publish_state(x);
          if (x == "32-CA-68-3F" || x == "42-11-E0-3F") {
            id(alarm_control).publish_state("Disarmed");
            id(message_text) = "Access Granted";
          } else {
            id(message_text) = "Access Denied";
          }
          id(show_message) = true;
      - delay: 3s
      - lambda: |-
          id(rfid_page) = false;
          id(show_message) = false;

# ------------------------
# Keypad Matrix (4x4)
# ------------------------
matrix_keypad:
  id: my_keypad
  rows:
    - pin: GPIO5
    - pin: GPIO4
    - pin: GPIO3
    - pin: GPIO2
  columns:
    - pin: GPIO8
    - pin: GPIO9
    - pin: GPIO7
    - pin: GPIO6
  keys: "123A456B789C*0#D"
  has_diodes: true
  on_key:
    - lambda: |-
        id(last_interaction) = millis() / 1000;
        if (id(show_welcome)) {
          id(show_welcome) = false;
          id(current_page) = 0;
        } else if (x == 'A') { id(current_page)--; if (id(current_page) < 0) id(current_page) = 4; }
        else if (x == 'B') { id(current_page)++; if (id(current_page) > 4) id(current_page) = 0; }
        else if (x == 'C') { id(current_page) = (id(current_page)+1) % 5; }
        else if (x == 'D') { id(current_page) = (id(current_page)-1+5) % 5; }
        else {
          if (x != '*' && x != '#') {
            id(entering_pin_page) = true;
            id(current_pin) += x;
          }
        }

key_collector:
  - id: pincode_reader
    source_id: my_keypad
    min_length: 4
    max_length: 4
    end_keys: "#"
    clear_keys: "*"
    allowed_keys: "0123456789"
    timeout: 5s
    on_result:
      - text_sensor.template.publish:
          id: entered_pin
          state: !lambda 'return x;'
      - lambda: |-
          id(last_interaction) = millis() / 1000;
          if (x == id(disarm_code)) {
            id(alarm_control).publish_state("Disarmed");
          } else if (x == id(arm_code)) {
            id(alarm_control).publish_state("Armed");
          } else {
            id(status_light).turn_on();
          }
          id(current_pin) = "";
          id(entering_pin_page) = false;
      - delay: 1s
      - light.turn_off: status_light
    on_timeout:
      - lambda: |-
          id(current_pin) = "";
          id(entering_pin_page) = false;

# ------------------------
# Relay for Lock
# ------------------------
switch:
  - platform: gpio
    pin: GPIO19
    id: lock_relay
    name: "Lock Relay"
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: restart
    name: "EaseLock ESP Restart"

# ------------------------
# OLED Display (SSD1306 0.96")
# ------------------------
i2c:
  sda: GPIO17
  scl: GPIO18
  scan: true

# ------------------------
# OLED Display (SSD1306 0.96")
# ------------------------
display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    id: oled_display
    lambda: |-
      if (!id(display_on)) {
        it.fill(COLOR_OFF);
        return;
      }

      if (id(show_message)) {
        it.fill(COLOR_OFF);

        // ✅ wrapped message display
        auto wrap_text = [&](std::string text, int max_chars, int start_y, int line_height) {
          std::string line;
          int y = start_y;
          int count = 0;

          for (char c : text) {
            if ((c == ' ' && count >= max_chars-1) || count >= max_chars) {
              it.printf(64, y, id(fontmess), TextAlign::CENTER, "%s", line.c_str());
              line.clear();
              count = 0;
              y += line_height;
              if (y > 64) break;
              continue;
            }

            line.push_back(c);
            count++;
          }

          if (!line.empty() && y <= 64) {
            it.printf(64, y, id(fontmess), TextAlign::CENTER, "%s", line.c_str());
          }
        };

        wrap_text(id(message_text), 12, 0, 14);  // max 12 chars per line
        return;
      }

      // ✅ rest of your existing display pages untouched
      if (id(show_welcome)) {
        it.fill(COLOR_OFF);
        it.printf(64, 25, id(font3), TextAlign::CENTER, "LockEase");
        it.printf(64, 45, id(font3), TextAlign::CENTER, "v1.0");
      } 
      else if (id(entering_pin_page)) {
        it.fill(COLOR_OFF);
        it.printf(64, 10, id(font2), TextAlign::CENTER, "Enter PIN");
        it.printf(64, 40, id(fontd), TextAlign::CENTER, "%s", id(current_pin).c_str());
      }
      else if (id(rfid_page)) {
        it.fill(COLOR_OFF);
        it.printf(64, 20, id(font2), TextAlign::CENTER, "Scanning...");
        it.printf(64, 45, id(font1), TextAlign::CENTER, "Place your card");
      }
      else {
        if (id(current_page) == 0) {
          it.strftime(64, 32, id(fontd), TextAlign::CENTER, "%H:%M", id(home_time).now());
          it.printf(64, 55, id(font2), TextAlign::CENTER, "%s", id(alarm_status).state.c_str());
        }
        else if (id(current_page) == 1) {
          it.printf(0, 0, id(font1), "Device Info");
          it.printf(0, 15, id(font1), "WiFi: %s", id(my_ip).state.c_str());
          it.printf(0, 30, id(font1), "Signal: %.0f dBm", id(wifi_strength).state);
          it.printf(0, 45, id(font1), "Lock: %s", id(lock_relay).state ? "Unlocked" : "Locked");
        }
        else if (id(current_page) == 2) {
          it.printf(64, 10, id(font2), TextAlign::CENTER, "HA Data");
          it.printf(64, 30, id(font1), TextAlign::CENTER, "Entity 1: ...");
          it.printf(64, 45, id(font1), TextAlign::CENTER, "Entity 2: ...");
        }
        else if (id(current_page) == 3) {
          it.printf(64, 32, id(font2), TextAlign::CENTER, "Coming Soon 1");
        }
        else if (id(current_page) == 4) {
          it.printf(64, 32, id(font2), TextAlign::CENTER, "Coming Soon 2");
        }
      }
# ------------------------
# Fonts
# ------------------------
font:
  - file: "ARIAL.TTF"
    id: font1
    size: 12

  - file: "ARIAL.TTF"
    id: font2
    size: 18

  - file: "ARIAL.TTF"
    id: font3
    size: 24

  - file: "fonts/digital-7m.ttf"
    id: fontd
    size: 44

  - file: "fonts/digital-7m.ttf"
    id: fontmess
    size: 24

# ------------------------
# Binary Sensor (Status)
# ------------------------
binary_sensor:
  - platform: status
    name: "Device Status"
    on_state:
      then:
        - light.turn_on:
            id: status_light
            red: 0
            green: 100%
            blue: 0
        - delay: 500ms
        - light.turn_off: status_light

sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_strength
    update_interval: 60s



# ------------------------
# Scripts
# ------------------------
script:
  - id: show_temp_message
    mode: restart
    then:
      - lambda: |-
          id(message_text) = id(ha_message).state;
          id(show_message) = true;
          id(last_interaction) = millis() / 1000;
      - component.update: oled_display
      - delay: 5s
      - lambda: |-
          id(show_message) = false;
      - component.update: oled_display
